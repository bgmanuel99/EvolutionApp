from tkinter import *

class CharacteristicsFrame(Frame):

    """This is the characteristics terminal from which the user will see all the species of the evolution frame and their real-time characteristics"""

    def __init__(self, root):
        Frame.__init__(self, root)
        self.config(background="gray8")

        self.left_data_frame = Frame(self, width=247, height=176)
        self.left_data_frame.pack(side=LEFT, anchor=W, padx=(2, 1), pady=2)
        self.left_data_frame.config(background="gray8")

        self.right_data_frame = Frame(self, width=647, height=176)
        self.right_data_frame.pack(side=RIGHT, anchor=E, padx=(1, 2), pady=2)
        self.right_data_frame.config(background="gray8")

        # Variables for the traceability of the epoch
        epoch_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        epoch_canvas.place(x=7, y=2, width=20, height=20)
        epoch_canvas.config(background="gray8")
        epoch_canvas.create_oval(3, 3, 17, 17, fill="purple")
        epoch_label = Label(self.left_data_frame, text="Actual epoch:", anchor="w")
        epoch_label.place(x=30, y=3, width=70, height=20)
        epoch_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.epoch_data_text = StringVar()
        self.epoch_data_text.set(0)
        epoch_data = Label(self.left_data_frame, textvariable=self.epoch_data_text, anchor="w")
        epoch_data.place(x=100, y=3, width=20, height=20)
        epoch_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the number of individuals
        number_of_individuals_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        number_of_individuals_canvas.place(x=7, y=22, width=20, height=20)
        number_of_individuals_canvas.config(background="gray8")
        number_of_individuals_canvas.create_oval(3, 3, 17, 17, fill="blue")
        number_of_individuals_label = Label(self.left_data_frame, text="Number of individuals:", anchor="w")
        number_of_individuals_label.place(x=30, y=23, width=115, height=20)
        number_of_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.number_of_individuals_data_text = StringVar()
        self.number_of_individuals_data_text.set(0)
        number_of_individuals_data = Label(self.left_data_frame, textvariable=self.number_of_individuals_data_text, anchor="w")
        number_of_individuals_data.place(x=145, y=23, width=20, height=20)
        number_of_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the number of food
        number_of_food_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        number_of_food_canvas.place(x=7, y=42, width=20, height=20)
        number_of_food_canvas.config(background="gray8")
        number_of_food_canvas.create_oval(3, 3, 17, 17, fill="green")
        number_of_food_label = Label(self.left_data_frame, text="Number of food:", anchor="w")
        number_of_food_label.place(x=30, y=43, width=80, height=20)
        number_of_food_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.number_of_food_data_text = StringVar()
        self.number_of_food_data_text.set(0)
        number_of_food_data = Label(self.left_data_frame, textvariable=self.number_of_food_data_text, anchor="w")
        number_of_food_data.place(x=110, y=43, width=20, height=20)
        number_of_food_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the non-survival individuals
        number_of_non_survival_individuals_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        number_of_non_survival_individuals_canvas.place(x=7, y=62, width=20, height=20)
        number_of_non_survival_individuals_canvas.config(background="gray8")
        number_of_non_survival_individuals_canvas.create_oval(3, 3, 17, 17, fill="thistle1")
        number_of_non_survival_individuals_label = Label(self.left_data_frame, text="Number of non-survival individuals:", anchor="w")
        number_of_non_survival_individuals_label.place(x=30, y=63, width=180, height=20)
        number_of_non_survival_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.number_of_non_survival_individuals_data_text = StringVar()
        self.number_of_non_survival_individuals_data_text.set(0)
        number_of_non_survival_individuals_data = Label(self.left_data_frame, textvariable=self.number_of_non_survival_individuals_data_text, anchor="w")
        number_of_non_survival_individuals_data.place(x=210, y=63, width=20, height=20)
        number_of_non_survival_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the survival individuals
        number_of_survival_individuals_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        number_of_survival_individuals_canvas.place(x=7, y=82, width=20, height=20)
        number_of_survival_individuals_canvas.config(background="gray8")
        number_of_survival_individuals_canvas.create_oval(3, 3, 17, 17, fill="red3")
        number_of_survival_individuals_label = Label(self.left_data_frame, text="Number of survival individuals:", anchor="w")
        number_of_survival_individuals_label.place(x=30, y=83, width=160, height=20)
        number_of_survival_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.number_of_survival_individuals_data_text = StringVar()
        self.number_of_survival_individuals_data_text.set(0)
        number_of_survival_individuals_data = Label(self.left_data_frame, textvariable=self.number_of_survival_individuals_data_text, anchor="w")
        number_of_survival_individuals_data.place(x=190, y=83, width=20, height=20)
        number_of_survival_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the individuals that can evolve
        number_of_evolving_individuals_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        number_of_evolving_individuals_canvas.place(x=7, y=102, width=20, height=20)
        number_of_evolving_individuals_canvas.config(background="gray8")
        number_of_evolving_individuals_canvas.create_oval(3, 3, 17, 17, fill="gold")
        number_of_evolving_individuals_label = Label(self.left_data_frame, text="Number of evolving individuals:", anchor="w")
        number_of_evolving_individuals_label.place(x=30, y=103, width=160, height=20)
        number_of_evolving_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.number_of_evolving_individuals_data_text = StringVar()
        self.number_of_evolving_individuals_data_text.set(0)
        number_of_evolving_individuals_data = Label(self.left_data_frame, textvariable=self.number_of_evolving_individuals_data_text, anchor="w")
        number_of_evolving_individuals_data.place(x=190, y=103, width=20, height=20)
        number_of_evolving_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the time of execution per epoch
        time_of_epoch_execution_canvas = Canvas(self.left_data_frame, highlightthickness=1, highlightbackground="gray8")
        time_of_epoch_execution_canvas.place(x=7, y=122, width=20, height=20)
        time_of_epoch_execution_canvas.config(background="gray8")
        time_of_epoch_execution_canvas.create_oval(3, 3, 17, 17, fill="coral")
        time_of_epoch_execution_label = Label(self.left_data_frame, text="Time of epoch execution:", anchor="w")
        time_of_epoch_execution_label.place(x=30, y=123, width=135, height=20)
        time_of_epoch_execution_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.time_of_epoch_execution_data_text = StringVar()
        self.time_of_epoch_execution_data_text.set(0)
        time_of_epoch_execution_data = Label(self.left_data_frame, textvariable=self.time_of_epoch_execution_data_text, anchor="w")
        time_of_epoch_execution_data.place(x=155, y=123, width=150, height=20)
        time_of_epoch_execution_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the maximum number of individuals in an epoch
        maximum_number_of_individuals_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        maximum_number_of_individuals_canvas.place(x=7, y=2, width=20, height=20)
        maximum_number_of_individuals_canvas.config(background="gray8")
        maximum_number_of_individuals_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        maximum_number_of_individuals_label = Label(self.right_data_frame, text="Maximum number of individuals on an epoch:", anchor="w")
        maximum_number_of_individuals_label.place(x=30, y=3, width=215, height=20)
        maximum_number_of_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.maximum_number_of_individuals_data_text = StringVar()
        self.maximum_number_of_individuals_data_text.set(0)
        maximum_number_of_individuals_data = Label(self.right_data_frame, textvariable=self.maximum_number_of_individuals_data_text, anchor="w")
        maximum_number_of_individuals_data.place(x=245, y=3, width=20, height=20)
        maximum_number_of_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the minimum number of individuals in an epoch
        minimum_number_of_individuals_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        minimum_number_of_individuals_canvas.place(x=7, y=22, width=20, height=20)
        minimum_number_of_individuals_canvas.config(background="gray8")
        minimum_number_of_individuals_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        minimum_number_of_individuals_label = Label(self.right_data_frame, text="Minimum number of individuals on an epoch:", anchor="w")
        minimum_number_of_individuals_label.place(x=30, y=23, width=215, height=20)
        minimum_number_of_individuals_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.minimum_number_of_individuals_data_text = StringVar()
        self.minimum_number_of_individuals_data_text.set(0)
        minimum_number_of_individuals_data = Label(self.right_data_frame, textvariable=self.minimum_number_of_individuals_data_text, anchor="w")
        minimum_number_of_individuals_data.place(x=245, y=23, width=20, height=20)
        minimum_number_of_individuals_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the minimum number of food in an epoch
        minimum_number_of_food_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        minimum_number_of_food_canvas.place(x=7, y=42, width=20, height=20)
        minimum_number_of_food_canvas.config(background="gray8")
        minimum_number_of_food_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        minimum_number_of_food_label = Label(self.right_data_frame, text="Minimum number of food on an epoch:", anchor="w")
        minimum_number_of_food_label.place(x=30, y=43, width=180, height=20)
        minimum_number_of_food_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.minimum_number_of_food_data_text = StringVar()
        self.minimum_number_of_food_data_text.set(0)
        minimum_number_of_food_data = Label(self.right_data_frame, textvariable=self.minimum_number_of_food_data_text, anchor="w")
        minimum_number_of_food_data.place(x=210, y=43, width=20, height=20)
        minimum_number_of_food_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the maximum velocity reached by any individual
        maximum_velocity_of_individual_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        maximum_velocity_of_individual_canvas.place(x=7, y=62, width=20, height=20)
        maximum_velocity_of_individual_canvas.config(background="gray8")
        maximum_velocity_of_individual_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        maximum_velocity_of_individual_label = Label(self.right_data_frame, text="Maximum velocity of an individual:", anchor="w")
        maximum_velocity_of_individual_label.place(x=30, y=63, width=175, height=20)
        maximum_velocity_of_individual_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.maximum_velocity_of_individual_data_text = StringVar()
        self.maximum_velocity_of_individual_data_text.set(0)
        maximum_velocity_of_individual_data = Label(self.right_data_frame, textvariable=self.maximum_velocity_of_individual_data_text, anchor="w")
        maximum_velocity_of_individual_data.place(x=205, y=63, width=20, height=20)
        maximum_velocity_of_individual_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the minimum velocity reached by any individual
        minimum_velocity_of_individual_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        minimum_velocity_of_individual_canvas.place(x=7, y=82, width=20, height=20)
        minimum_velocity_of_individual_canvas.config(background="gray8")
        minimum_velocity_of_individual_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        minimum_velocity_of_individual_label = Label(self.right_data_frame, text="Minimum velocity of an individual:", anchor="w")
        minimum_velocity_of_individual_label.place(x=30, y=83, width=175, height=20)
        minimum_velocity_of_individual_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.minimum_velocity_of_individual_data_text = StringVar()
        self.minimum_velocity_of_individual_data_text.set(0)
        minimum_velocity_of_individual_data = Label(self.right_data_frame, textvariable=self.minimum_velocity_of_individual_data_text, anchor="w")
        minimum_velocity_of_individual_data.place(x=205, y=83, width=20, height=20)
        minimum_velocity_of_individual_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the maximum size reached by any individual
        maximum_size_of_individual_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        maximum_size_of_individual_canvas.place(x=7, y=102, width=20, height=20)
        maximum_size_of_individual_canvas.config(background="gray8")
        maximum_size_of_individual_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        maximum_size_of_individual_label = Label(self.right_data_frame, text="Maximum size of an individual:", anchor="w")
        maximum_size_of_individual_label.place(x=30, y=103, width=155, height=20)
        maximum_size_of_individual_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.maximum_size_of_individual_data_text = StringVar()
        self.maximum_size_of_individual_data_text.set(0)
        maximum_size_of_individual_data = Label(self.right_data_frame, textvariable=self.maximum_size_of_individual_data_text, anchor="w")
        maximum_size_of_individual_data.place(x=185, y=103, width=20, height=20)
        maximum_size_of_individual_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the minimum size reached by any individual
        minimum_size_of_individual_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        minimum_size_of_individual_canvas.place(x=7, y=122, width=20, height=20)
        minimum_size_of_individual_canvas.config(background="gray8")
        minimum_size_of_individual_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        minimum_size_of_individual_label = Label(self.right_data_frame, text="Minimum size of an individual:", anchor="w")
        minimum_size_of_individual_label.place(x=30, y=123, width=155, height=20)
        minimum_size_of_individual_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.minimum_size_of_individual_data_text = StringVar()
        self.minimum_size_of_individual_data_text.set(0)
        minimum_size_of_individual_data = Label(self.right_data_frame, textvariable=self.minimum_size_of_individual_data_text, anchor="w")
        minimum_size_of_individual_data.place(x=185, y=123, width=20, height=20)
        minimum_size_of_individual_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the most appearing velocity per epoch
        most_appearing_velocity_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        most_appearing_velocity_canvas.place(x=300, y=2, width=20, height=20)
        most_appearing_velocity_canvas.config(background="gray8")
        most_appearing_velocity_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        most_appearing_velocity_label = Label(self.right_data_frame, text="Most appearing velocity (velocity, individuals):", anchor="w")
        most_appearing_velocity_label.place(x=323, y=3, width=243, height=20)
        most_appearing_velocity_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.most_appearing_velocity_data_text = StringVar()
        self.most_appearing_velocity_data_text.set("[0, 0]")
        most_appearing_velocity_data = Label(self.right_data_frame, textvariable=self.most_appearing_velocity_data_text, anchor="w")
        most_appearing_velocity_data.place(x=566, y=3, width=50, height=20)
        most_appearing_velocity_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the most appearing size per epoch
        most_appearing_size_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        most_appearing_size_canvas.place(x=300, y=22, width=20, height=20)
        most_appearing_size_canvas.config(background="gray8")
        most_appearing_size_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        most_appearing_size_label = Label(self.right_data_frame, text="Most appearing size (size, individuals):", anchor="w")
        most_appearing_size_label.place(x=323, y=23, width=203, height=20)
        most_appearing_size_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.most_appearing_size_data_text = StringVar()
        self.most_appearing_size_data_text.set("[0, 0]")
        most_appearing_size_data = Label(self.right_data_frame, textvariable=self.most_appearing_size_data_text, anchor="w")
        most_appearing_size_data.place(x=526, y=23, width=50, height=20)
        most_appearing_size_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

        # Variables for the traceability of the time of execution of the algorithm
        time_of_algorithm_execution_canvas = Canvas(self.right_data_frame, highlightthickness=1, highlightbackground="gray8")
        time_of_algorithm_execution_canvas.place(x=300, y=42, width=20, height=20)
        time_of_algorithm_execution_canvas.config(background="gray8")
        time_of_algorithm_execution_canvas.create_polygon(10, 5, 15, 10, 10, 15, 5, 10, fill="dark violet")
        time_of_algorithm_execution_label = Label(self.right_data_frame, text="Total time of execution:", anchor="w")
        time_of_algorithm_execution_label.place(x=323, y=43, width=125, height=20)
        time_of_algorithm_execution_label.config(background="gray8", foreground="white", font=("Terminal", 11))
        self.time_of_algorithm_execution_data_text = StringVar()
        self.time_of_algorithm_execution_data_text.set(0)
        time_of_algorithm_execution_data = Label(self.right_data_frame, textvariable=self.time_of_algorithm_execution_data_text, anchor="w")
        time_of_algorithm_execution_data.place(x=448, y=43, width=150, height=20)
        time_of_algorithm_execution_data.config(background="gray8", foreground="springgreen", font=("Terminal", 11))

    def update_data(self, data):
        """This function will update the variables of the characteristics terminal to reflect the data of the genetic algorithm"""

        if data["actual_epoch"] != None: self.epoch_data_text.set(data["actual_epoch"])
        if data["number_of_individuals"] != None: self.number_of_individuals_data_text.set(data["number_of_individuals"])
        if data["number_of_food"] != None: self.number_of_food_data_text.set(data["number_of_food"])
        if data["number_of_non_survival_individuals"] != None: self.number_of_non_survival_individuals_data_text.set(data["number_of_non_survival_individuals"])
        if data["number_of_survival_individuals"] != None: self.number_of_survival_individuals_data_text.set(data["number_of_survival_individuals"])
        if data["number_of_evolving_individuals"] != None: self.number_of_evolving_individuals_data_text.set(data["number_of_evolving_individuals"])
        if data["maximum_number_of_individuals"] != None: self.maximum_number_of_individuals_data_text.set(data["maximum_number_of_individuals"])
        if data["minimum_number_of_individuals"] != None: self.minimum_number_of_individuals_data_text.set(data["minimum_number_of_individuals"])
        if data["minimum_number_of_food"] != None: self.minimum_number_of_food_data_text.set(data["minimum_number_of_food"])
        if data["maximum_velocity_of_an_individual"] != None: self.maximum_velocity_of_individual_data_text.set(data["maximum_velocity_of_an_individual"])
        if data["minimum_velocity_of_an_individual"] != None: self.minimum_velocity_of_individual_data_text.set(data["minimum_velocity_of_an_individual"])
        if data["maximum_size_of_an_individual"] != None: self.maximum_size_of_individual_data_text.set(data["maximum_size_of_an_individual"])
        if data["minimum_size_of_an_individual"] != None: self.minimum_size_of_individual_data_text.set(data["minimum_size_of_an_individual"])
        if data["most_appearing_velocity"] != None: self.most_appearing_velocity_data_text.set("[{}, {}]".format(data["most_appearing_velocity"][0], data["most_appearing_velocity"][1]))
        if data["most_appearing_size"] != None: self.most_appearing_size_data_text.set("[{}, {}]".format(data["most_appearing_size"][0], data["most_appearing_size"][1]))

    def update_algorithm_time_of_execution(self, time, scale):
        """This function will update the variable of the time of total execution for the algorithm"""

        if time == 0: self.time_of_algorithm_execution_data_text.set(0)
        elif scale == "seconds": self.time_of_algorithm_execution_data_text.set("{} seconds".format(time))
        elif scale == "minutes": self.time_of_algorithm_execution_data_text.set("{} minutes".format(time))
        elif scale == "hours": self.time_of_algorithm_execution_data_text.set("{} hours".format(time))

    def update_epoch_time_of_execution(self, time, scale):
        """This function will update the variable of the time of total execution for the epoch"""

        if time == 0: self.time_of_epoch_execution_data_text.set(0)
        elif scale == "seconds": self.time_of_epoch_execution_data_text.set("{} seconds".format(time))
        elif scale == "minutes": self.time_of_epoch_execution_data_text.set("{} minutes".format(time))
        elif scale == "hours": self.time_of_epoch_execution_data_text.set("{} hours".format(time))